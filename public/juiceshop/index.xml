<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Juice Shop on Oshikuru&#39;s blog</title>
    <link>https://jjolley91.github.io/blog/juiceshop/</link>
    <description>Recent content in Juice Shop on Oshikuru&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 25 May 2023 13:25:32 -0500</lastBuildDate><atom:link href="https://jjolley91.github.io/blog/juiceshop/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JuiceShop vs XSS</title>
      <link>https://jjolley91.github.io/blog/juiceshop/juiceshop-vs-xss/</link>
      <pubDate>Thu, 25 May 2023 13:25:32 -0500</pubDate>
      
      <guid>https://jjolley91.github.io/blog/juiceshop/juiceshop-vs-xss/</guid>
      <description>Here are different words.</description>
    </item>
    
    <item>
      <title>JuiceShop vs SQLI</title>
      <link>https://jjolley91.github.io/blog/juiceshop/juiceshop-vs-sqli/</link>
      <pubDate>Thu, 25 May 2023 13:20:30 -0500</pubDate>
      
      <guid>https://jjolley91.github.io/blog/juiceshop/juiceshop-vs-sqli/</guid>
      <description>Intro In this blog I will be exploring OWASP Juice Shop using SQL injection techniques, exploring various enumeration methods, and solving the SQL challenges.
Any time there is a search bar, or area a user can imput text on a web application there exists the potential for sql injection. This makes it very important to handle all possible edege cases so that someone does not accidentally, or intentionally break your application.</description>
    </item>
    
  </channel>
</rss>
